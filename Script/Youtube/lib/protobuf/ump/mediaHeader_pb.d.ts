// @generated by protoc-gen-es v1.7.2
// @generated from file protobuf/ump/mediaHeader.proto (package youtube.ump.mediaHeader, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum youtube.ump.mediaHeader.CompressionAlgorithm
 */
export declare enum CompressionAlgorithm {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: NONE_1 = 1;
   */
  NONE_1 = 1,

  /**
   * @generated from enum value: GZIP = 2;
   */
  GZIP = 2,
}

/**
 * @generated from message youtube.ump.mediaHeader.MediaHeader
 */
export declare class MediaHeader extends Message<MediaHeader> {
  /**
   * @generated from field: uint32 headerId = 1;
   */
  headerId: number;

  /**
   * @generated from field: string videoId = 2;
   */
  videoId: string;

  /**
   * @generated from field: int32 iTag = 3;
   */
  iTag: number;

  /**
   * @generated from field: uint64 lastModified = 4;
   */
  lastModified: bigint;

  /**
   * @generated from field: string xTags = 5;
   */
  xTags: string;

  /**
   * @generated from field: int64 startRange = 6;
   */
  startRange: bigint;

  /**
   * @generated from field: youtube.ump.mediaHeader.CompressionAlgorithm compressionAlgorithm = 7;
   */
  compressionAlgorithm: CompressionAlgorithm;

  /**
   * @generated from field: bool isInitSegment = 8;
   */
  isInitSegment: boolean;

  /**
   * @generated from field: int64 sequenceNumber = 9;
   */
  sequenceNumber: bigint;

  /**
   * @generated from field: youtube.ump.mediaHeader.FormatId formatId = 13;
   */
  formatId?: FormatId;

  /**
   * @generated from field: int64 length = 14;
   */
  length: bigint;

  /**
   * @generated from field: youtube.ump.mediaHeader.TimeRange timeRange = 15;
   */
  timeRange?: TimeRange;

  constructor(data?: PartialMessage<MediaHeader>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "youtube.ump.mediaHeader.MediaHeader";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaHeader;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaHeader;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaHeader;

  static equals(a: MediaHeader | PlainMessage<MediaHeader> | undefined, b: MediaHeader | PlainMessage<MediaHeader> | undefined): boolean;
}

/**
 * @generated from message youtube.ump.mediaHeader.TimeRange
 */
export declare class TimeRange extends Message<TimeRange> {
  /**
   * @generated from field: int64 start_ticks = 1;
   */
  startTicks: bigint;

  /**
   * @generated from field: int64 duration_ticks = 2;
   */
  durationTicks: bigint;

  /**
   * @generated from field: int32 timescale = 3;
   */
  timescale: number;

  constructor(data?: PartialMessage<TimeRange>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "youtube.ump.mediaHeader.TimeRange";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRange;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRange;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRange;

  static equals(a: TimeRange | PlainMessage<TimeRange> | undefined, b: TimeRange | PlainMessage<TimeRange> | undefined): boolean;
}

/**
 * @generated from message youtube.ump.mediaHeader.FormatId
 */
export declare class FormatId extends Message<FormatId> {
  /**
   * @generated from field: int32 iTag = 1;
   */
  iTag: number;

  /**
   * @generated from field: uint64 lastModified = 2;
   */
  lastModified: bigint;

  /**
   * @generated from field: string xTags = 3;
   */
  xTags: string;

  constructor(data?: PartialMessage<FormatId>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "youtube.ump.mediaHeader.FormatId";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FormatId;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FormatId;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FormatId;

  static equals(a: FormatId | PlainMessage<FormatId> | undefined, b: FormatId | PlainMessage<FormatId> | undefined): boolean;
}

