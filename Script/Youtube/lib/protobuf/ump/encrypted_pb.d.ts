// @generated by protoc-gen-es v1.7.2
// @generated from file protobuf/ump/encrypted.proto (package youtube.ump.encrypted, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum youtube.ump.encrypted.CompressionAlgorithm
 */
export declare enum CompressionAlgorithm {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: GZIP = 1;
   */
  GZIP = 1,

  /**
   * @generated from enum value: BROTLI = 2;
   */
  BROTLI = 2,
}

/**
 * @generated from message youtube.ump.encrypted.EncryptedInnertubeResponsePart
 */
export declare class EncryptedInnertubeResponsePart extends Message<EncryptedInnertubeResponsePart> {
  /**
   * @generated from field: bytes encryptedContent = 1;
   */
  encryptedContent: Uint8Array;

  /**
   * @generated from field: bytes hmac = 2;
   */
  hmac: Uint8Array;

  /**
   * @generated from field: bytes iv = 3;
   */
  iv: Uint8Array;

  /**
   * @generated from field: youtube.ump.encrypted.CompressionAlgorithm compressionAlgorithm = 4;
   */
  compressionAlgorithm: CompressionAlgorithm;

  constructor(data?: PartialMessage<EncryptedInnertubeResponsePart>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "youtube.ump.encrypted.EncryptedInnertubeResponsePart";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncryptedInnertubeResponsePart;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncryptedInnertubeResponsePart;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncryptedInnertubeResponsePart;

  static equals(a: EncryptedInnertubeResponsePart | PlainMessage<EncryptedInnertubeResponsePart> | undefined, b: EncryptedInnertubeResponsePart | PlainMessage<EncryptedInnertubeResponsePart> | undefined): boolean;
}

